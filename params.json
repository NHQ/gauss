{"tagline":"JavaScript statistics, analytics, and set library - Node.js and web browser ready","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"Gauss\r\n=============\r\n[![Build Status](https://secure.travis-ci.org/stackd/gauss.png)](http://travis-ci.org/stackd/gauss)\r\n\r\n> JavaScript statistics, analytics, and set library - [Node.js](http://nodejs.org/) and web browser ready\r\n\r\nEvented, asynchronous, and fast, [Node.js][1] is an attractive platform for data mining, statistics, and data analysis.\r\n[Gauss](http://en.wikipedia.org/wiki/Carl_Friedrich_Gauss) makes it [easy to calculate and explore data through JavaScript](http://fredrickgaloso.me/talks/gauss.html#9),\r\nboth on Node.js and within the web browser.\r\n\r\n[1]: http://nodejs.org/\r\n\r\n## License\r\nMIT/X11 - See [LICENSE][2]\r\n\r\n[2]: http://github.com/stackd/gauss/blob/master/LICENSE\r\n\r\n## Getting started\r\n\r\n### Install with NPM (Node Package Manager)\r\n\r\nGetting started with Gauss + Node.js is easy:\r\n\r\n    $ npm install gauss\r\n\r\n``` javascript\r\nvar gauss = require('gauss');\r\n```\r\n\r\n### Installing development dependencies and running tests\r\n\r\nTo run Gauss's tests you'll need [Vows](http://vowsjs.org/). NPM can automatically resolve this:\r\n\r\n    $ npm install gauss --devel\r\n\r\nTo invoke the tests:\r\n\r\n    $ npm test\r\n\r\n### Using Gauss within a web browser\r\n\r\nGauss requires support for ECMAScript 5 `Object.defineProperties`. Compatibility is listed [here](http://kangax.github.com/es5-compat-table/). Download and include [gauss.min.js](https://raw.github.com/stackd/gauss/master/gauss.min.js):\r\n\r\n``` html\r\n<script src=\"gauss.min.js\" type=\"text/javascript\"></script>\r\n<script type=\"text/javascript\" charset=\"utf-8\">\r\n    var Vector = gauss.Vector,\r\n        TimeSeries = gauss.TimeSeries;\r\n    var set = new gauss.Vector(5, 1, 3, 2, 21),\r\n        numbers = new Vector([8, 6, 7, 5, 3, 0, 9]),\r\n        times = new TimeSeries([1315378833000, 3.5], [1315789015000, 7.826]);\r\n</script>\r\n```\r\n\r\n### Using the REPL console\r\n\r\nTo experiment with Gauss or to quickly start a Node.js command-line environment for number crunching, Gauss ships with a lightweight REPL (Read–eval–print loop). Start the REPL with `npm start` within the source directory, or `gauss` if installed globally (via `npm install -g gauss`).\r\n\r\nFor example, using the `help()` function and analyzing a data file from the Gauss REPL:\r\n\r\n``` javascript\r\n$ gauss\r\ngauss> help()\r\nGauss 0.2.7\r\n   /* https://github.com/stackd/gauss#api */ \r\n   Functions: print, inspect, cwd, clear, install, uninstall, help\r\n   Usage:\r\n     var set = new Vector(1, 2, 3);\r\n     var times = new gauss.TimeSeries();\r\n{ version: '0.2.7',\r\n  Collection: [Function],\r\n  Vector: [Function],\r\n  TimeSeries: [Function] }\r\ngauss> var fs = require('fs');\r\ngauss> var data = fs.readFileSync('data.txt').toString();\r\ngauss> data = data.split('\\n');\r\n[ '8',\r\n  '6',\r\n  '7',\r\n  '5',\r\n  '3',\r\n  '0',\r\n  '9' ]\r\ngauss> data = data.map(function(line) { return parseInt(line) });\r\ngauss> var set = new Vector(data);\r\ngauss> set.mean()\r\n5.428571428571429\r\n```\r\n\r\n## API\r\n\r\nGauss has methods for univariate (Vector) and time series (TimeSeries) analysis. We're constantly working on adding more functions, adding multivariate statistics, and we encourage additions to the library. Accuracy is a primary concern. If Gauss is returning incorrect results, [please submit an issue](https://github.com/stackd/gauss/issues) and/or [submit a patch](https://github.com/stackd/gauss#fork_box)!\r\n\r\n### Instantiation\r\n\r\n``` javascript\r\n// List of numbers\r\nvar set = new gauss.Vector(5, 1, 3, 2, 21);\r\n// From a regular Array\r\nvar numbers = new gauss.Vector([8, 6, 7, 5, 3, 0, 9]);\r\n// Convert an Array to a Vector with helper method toVector()\r\nvar vanilla = [4, 1, 2, 5, 6];\r\nvar chocolate = vanilla.toVector();\r\n// After instantiation, Gauss objects can be conveniently used like any Array\r\nnumbers[0] = 2;\r\nset[1] = 7;\r\n```\r\n\r\n*Note: To prevent unintended scope/prototype pollution, Gauss versions after 0.2.3 have [removed support for monkey patching](https://github.com/stackd/gauss/issues/6) the native Array data type.\r\nUse the .toArray() method of any Gauss object to a convert to a vanilla Array. Gauss adds a toVector() convenience method to the Array prototype to facilitate converting to Vectors.*\r\n\r\n### Callbacks and method chaining\r\n\r\nAll of Gauss's methods accept an *optional* [callback][3]:\r\n\r\n[3]: http://en.wikipedia.org/wiki/Callback_(computer_programming)\r\n\r\n``` javascript\r\nset.min();\r\nset.min(function(result) {\r\n    result / 2;\r\n    /* Do more things with the minimum*/\r\n});\r\n```\r\n\r\nIn addition, for methods that return another Vector, method chaining makes it easy to perform calculations that flow through each other:\r\n\r\n``` javascript\r\nset.quantile(4).stdev(); // Find the standard deviation of data set's quartiles\r\n```\r\n\r\nFinally, you can mix and match both callbacks and chaining:\r\n\r\n``` javascript\r\nset.quantile(4).stdev(function(stdev) {\r\n    if (stdev > 1) {\r\n        /* Do something awesome */\r\n    }\r\n});\r\n```\r\n\r\n### Collection\r\n\r\n#### Collection.indexBy\r\n\r\n    .indexBy(predicate, callback)\r\n\r\nReturns the first index of an element that matches a condition.\r\n\r\n#### Collection.indicesOf\r\n\r\n    .indicesOf(element, callback)\r\n\r\nReturns the indices of all elements that match a value.\r\n\r\n#### Collection.indicesBy\r\n\r\n    .indicesBy(predicate, callback)\r\n\r\nReturns all indices of an element that match a condition.\r\n\r\n#### Collection.lastIndexBy\r\n\r\n    .lastIndexBy(predicate, callback)\r\n\r\nReturns the last index of an element that matches a condition.\r\n\r\n#### Collection.find\r\n\r\n    .find(predicate, callback)\r\n\r\nReturns all the elements that match a condition.\r\n\r\n``` javascript\r\nvar people = new gauss.Collection(\r\n  { firstname: 'John', lastname: 'Smith' },\r\n  { firstname: 'Jane', lastname: 'Doe' },\r\n  { firstname: 'Mike', lastname: 'Smith' },\r\n  { firstname: 'Susan', lastname: 'Baker' }\r\n);\r\n// Using a predicate Function\r\npeople.find(function(e) { return e.firstname === 'Jane' });\r\n> [{ firstname: 'Jane', lastname: 'Doe' }]\r\n// Using a condition Object\r\npeople.find({ lastname: 'Smith' });\r\n> [{ firstname: 'John', lastname: 'Smith' },\r\n  { firstname: 'Mike', lastname: 'Smith' }]\r\n```\r\n\r\n#### Collection.findOne\r\n\r\n    .findOne(predicate, callback)\r\n\r\nReturns the first element that matches a condition.\r\n\r\n``` javascript\r\n// Using a predicate Function\r\npeople.findOne(function(e) { return e.firstname === 'Jane' });\r\n> { firstname: 'Jane', lastname: 'Doe' }\r\n// Using a condition Object\r\npeople.findOne({ lastname: 'Smith' });\r\n> { firstname: 'John', lastname: 'Smith' }\r\n```\r\n\r\n#### Collection.mode\r\n\r\n    .mode(callback)\r\n\r\nReturns the value(s) that occur the most frequently in a data set. If there is a tie, returns a Collection of values.\r\n\r\n#### Collection.frequency\r\n\r\n    .frequency(element, callback)\r\n\r\nReturns the number of occurrences of value within a data set.\r\n\r\n#### Collection.distribution\r\n\r\n    .distribution(format, callback)\r\n\r\nReturns an `Object` containing the (frequency) distribution of values within the Collection. Default format: `absolute`; `relative` returns ratio of occurrences and total number of values in a data set. \r\n\r\n``` javascript\r\nset.distribution();\r\n> {\r\n    1: 1,\r\n    2: 1,\r\n    3: 1,\r\n    5: 1,\r\n    21: 1\r\n  }\r\nset.distribution('relative');\r\n> {\r\n    1: 0.2,\r\n    2: 0.2,\r\n    3: 0.2,\r\n    5: 0.2,\r\n    21: 0.2\r\n  }\r\n```\r\n\r\n#### Collection.append\r\n\r\n    .append(that, callback)\r\n\r\nReturn Collection appended with an Array.\r\n\r\n``` javascript\r\nvar numbers = new Collection(1, 2, 3).append([1, 2, 3]);\r\n> [1, 2, 3, 1, 2, 3]\r\n```\r\n\r\n### Vector\r\n\r\n#### Vector.min\r\n\r\n    .min(callback)\r\n\r\nReturns the smallest number.\r\n\r\n#### Vector.max\r\n\r\n    .max(callback)\r\n\r\nReturns the largest number.\r\n\r\n#### Vector.equal\r\n\r\n    .equal(callback)\r\n\r\nReturns `true` or `false` if Vector values are equal to another Vector or Array.\r\n\r\n#### Vector.sum\r\n\r\n    .sum(callback)\r\n\r\nReturns the sum of the numbers.\r\n\r\n#### Vector.product\r\n\r\n    .product(callback)\r\n\r\nReturns the product of the numbers.\r\n\r\n#### Vector.push\r\n\r\n    .push(number1, ..., numberN, callback)\r\n\r\nReturns the updated Vector with one or more elements appended to the end; performs/maintains streaming calculations.\r\n\r\n``` javascript\r\nvar Vector = require('gauss').Vector,\r\n    digits = new Vector();\r\n// Push some numbers in\r\ndigits.push(1, 2, 3);\r\n> 3\r\ndigits.sum();\r\n> 6\r\n// Keep on pushing; sum is updated as numbers are pushed\r\n digits.push(4, 5, 6);\r\n> 6\r\n```\r\n*Note: Streaming calculations like sum(), product(), variance(), and functions dependent on streaming capable functions benefit from O(1) amortized performance.*\r\n\r\n#### Vector.range\r\n\r\n    .range(callback)\r\n\r\nReturns the difference between the largest and smallest value in a data set.\r\n\r\n#### Vector.mean\r\n\r\n    .mean(callback)\r\n\r\nReturns the arithmetic mean.\r\n\r\n#### Vector.gmean\r\n\r\n    .gmean(callback)\r\n\r\nReturns the geometric mean.\r\n\r\n#### Vector.hmean\r\n\r\n    .hmean(callback)\r\n\r\nReturns the harmonic mean.\r\n\r\n#### Vector.qmean\r\n\r\n    .qmean(callback)\r\n\r\nReturns the quadratic mean (RMS, root mean square).\r\n\r\n#### Vector.median\r\n\r\n    .median(callback)\r\n\r\nReturns the median. If there are an even amount of numbers in the data set, returns the arithmetic mean of the two middle values.\r\n\r\n#### Vector.mode\r\n\r\n    .mode(callback)\r\n\r\nReturns the value(s) that occur the most frequently in a data set. If there is a tie, returns a Vector of values.\r\n\r\n#### Vector.variance\r\n\r\n    .variance(callback)\r\n\r\nReturns a measure of how far a set of numbers are spread out from each other.\r\n\r\n#### Vector.stdev\r\n\r\n    .stdev(percent, callback)\r\n\r\nReturns the standard deviation of data set. If a percent is given, returns the standard deviation with respect to a percentile of the population.\r\n\r\n#### Vector.frequency\r\n\r\n    .frequency(value, callback)\r\n\r\nReturns the number of occurrences of value within a data set.\r\n\r\n#### Vector.percentile\r\n\r\n    .percentile(value, callback)\r\n\r\nReturns the value that below which a certain percent of observations fall within the data set.\r\n\r\n#### Vector.density\r\n\r\n    .density(percent, callback)\r\n\r\nReturns a Vector which is a percentile subset of values occurring within a data set.\r\n\r\n#### Vector.distribution\r\n\r\n    .distribution(format, callback)\r\n\r\nReturns an `Object` containing the (frequency) distribution of values within the Vector. Default format: `absolute`; `relative` returns ratio of occurrences and total number of values in a data set. \r\n\r\n``` javascript\r\nset.distribution();\r\n> {\r\n    1: 1,\r\n    2: 1,\r\n    3: 1,\r\n    5: 1,\r\n    21: 1\r\n  }\r\nset.distribution('relative');\r\n> {\r\n    1: 0.2,\r\n    2: 0.2,\r\n    3: 0.2,\r\n    5: 0.2,\r\n    21: 0.2\r\n  }\r\n```\r\n\r\n#### Vector.quantile\r\n\r\n    .quantile(quantity, callback)\r\n\r\nReturns a Vector of values that divide a frequency distribution into equal groups, each containing the same fraction of the total data set.\r\n\r\n``` javascript\r\nset.quantile(4); // Quartiles\r\n```\r\n\r\n#### Vector.sma\r\n\r\n    .sma(period, callback)\r\n\r\nReturns a Vector of the simple moving average (SMA); unweighted means of the previous n data points. `period` is the length of observation window for moving average.\r\n\r\n``` javascript\r\nvar prices = [22.2734, 22.194, 22.0847, 22.1741, 22.184, 22.1344,\r\n22.2337, 22.4323, 22.2436, 22.2933, 22.1542, 22.3926,\r\n22.3816, 22.6109, 23.3558, 24.0519, 23.753, 23.8324,\r\n23.9516, 23.6338, 23.8225, 23.8722, 23.6537, 23.187,\r\n23.0976, 23.326, 22.6805, 23.0976, 22.4025, 22.1725];\r\n\r\nprices = prices.toVector();\r\n\r\n// 10-period SMA\r\nprices.sma(10);\r\n> [ 22.22475, 22.21283, 22.232689999999998,\r\n    22.26238, 22.30606, 22.42324,\r\n    22.61499, 22.76692, 22.90693,\r\n    23.07773, 23.211779999999997, 23.37861,\r\n    23.52657, 23.653779999999998, 23.711389999999998,\r\n    23.68557, 23.61298, 23.50573,\r\n    23.43225, 23.27734, 23.13121\r\n  ]\r\n```\r\n\r\n#### Vector.ema\r\n\r\n    .ema(options, callback)\r\n\r\nReturns a Vector of the exponential moving average (EMA); weighted means of the previous n data points.\r\n`options` is\r\n\r\n- Number Length of the observation window for moving average, using the default smoothing ratio (2 / period + 1) **or**\r\n- Object.period Length of the observation window for moving average\r\n- Object.ratio Function returning a Number to be used as smoothing ratio\r\n\r\n``` javascript\r\n// 10-period EMA\r\nprices.ema(10);\r\n> [ 22.22475, 22.21192272727273, 22.24477314049587,\r\n    22.269650751314803, 22.331696069257568, 22.51789678393801,\r\n    22.796806459585646, 22.970659830570074, 23.127339861375514,\r\n    23.27720534112542, 23.34204073364807, 23.429396963893875,\r\n    23.509906606822263, 23.536050860127308, 23.47258706737689,\r\n    23.40440760058109, 23.390151673202713, 23.261124096256765,\r\n    23.231392442391897, 23.080684725593372, 22.91556023003094\r\n  ]\r\n\r\n// 10-period Welles Wilder EMA\r\nprices.ema({\r\n    period: 10,\r\n    ratio: function(n) { return 1 / n; }\r\n});\r\n> [ 22.22475, 22.217695, 22.2351855,\r\n    22.24982695, 22.285934255, 22.3929208295,\r\n    22.55881874655, 22.678236871895, 22.793653184705498,\r\n    22.90944786623495, 22.981883079611453, 23.065944771650308,\r\n    23.146570294485276, 23.19728326503675, 23.196254938533073,\r\n    23.186389444679765, 23.20035050021179, 23.14836545019061,\r\n    23.14328890517155, 23.069210014654395, 22.979539013188955\r\n  ]\r\n```\r\n\r\n#### Vector.delta\r\n\r\n    .delta(callback)\r\n\r\nReturns a Vector of values containing the sequential difference between numbers in a sequence.\r\n\r\n#### Vector.extend\r\n\r\n    .extend(methods, callback)\r\n\r\nReturns a Vector extended with named functions.\r\n\r\nWithin the function body, `this` is attached to the Vector being extended and the function may take zero or more arguments.\r\nTo maintain chainability, return `this`.\r\n\r\n``` javascript\r\n// Instantiate a new Vector with extensions\r\nvar set = new Vector(14, 6, 9, 3, 18,\r\n    7, 11, 1, 2, 20,\r\n    12, 16, 8, 4, 5,\r\n    19, 15, 17, 10, 13\r\n).extend({\r\n    head: function() {\r\n        return this[0];\r\n    },\r\n    tail: function() {\r\n        return this.slice(1);\r\n    }\r\n});\r\nset.head()\r\n> 14\r\nset.tail()\r\n> [ 6, 9, 3, 18,\r\n    7, 11, 1, 2, 20,\r\n    12, 16, 8, 4, 5,\r\n    19, 15, 17, 10, 13\r\n  ]\r\n// Extend instantiated objects\r\nset.extend({\r\n    // Distribution of deltas\r\n    ddist: function(format) {\r\n        return this.delta().distribution(format);\r\n    }\r\n});\r\nset.ddist('relative')\r\n> { \r\n    '1': 0.10526315789473684,\r\n    '2': 0.05263157894736842,\r\n    '3': 0.10526315789473684,\r\n    '4': 0.10526315789473684,\r\n    '14': 0.05263157894736842,\r\n    '15': 0.05263157894736842,\r\n    '18': 0.05263157894736842,\r\n    '-11': 0.05263157894736842,\r\n    '-10': 0.05263157894736842,\r\n    '-8': 0.15789473684210525,\r\n    '-7': 0.05263157894736842,\r\n    '-6': 0.05263157894736842,\r\n    '-4': 0.10526315789473684\r\n  }\r\n```\r\n\r\n#### Vector.copy\r\n\r\n    .copy(callback)\r\n\r\nReturns a copy of the data set.\r\n\r\n#### Vector.clone\r\n\r\n    .clone(callback)\r\n\r\nReturns another instance of the Vector object and data.\r\n\r\n### Math\r\n\r\n`Vector` supports applying all the [Math](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Math#Methods) object methods to an entire Vector set of numbers.\r\n\r\nFor example, applying `pow` primitive method on a set to calculate the quadratic mean\r\n\r\n``` javascript\r\nvar squares = set.pow(2); // A Vector of set's members squared\r\n> [25, 1, 9, 4, 441]\r\nMath.sqrt(squares.sum() / squares.length); // Sum the squares -> find average -> quadratic mean (RMS)\r\n> 9.797958971132712\r\n```\r\n\r\n### TimeSeries\r\n\r\nPerform time series analysis. TimeSeries currently accepts time in epoch milliseconds followed by a numeric value.\r\n\r\n``` javascript\r\nvar gauss = require('gauss');\r\nvar set = new gauss.TimeSeries([1315378833000, 3.5], [1315789015000, 7.826]);\r\n```\r\n\r\n#### TimeSeries.times\r\n\r\n    .times(callback)\r\n\r\nReturns a Vector of the times.\r\n\r\n#### TimeSeries.values\r\n\r\n    .values(callback)\r\n\r\nReturns a Vector of the time series values.\r\n","name":"Gauss","google":""}